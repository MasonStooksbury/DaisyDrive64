ARM GAS  C:\cygwin64\tmp\cckBM75g.s 			page 1


   1              		.cpu cortex-m7
   2              		.arch armv7e-m
   3              		.fpu fpv5-d16
   4              		.eabi_attribute 28, 1
   5              		.eabi_attribute 20, 1
   6              		.eabi_attribute 21, 1
   7              		.eabi_attribute 23, 3
   8              		.eabi_attribute 24, 1
   9              		.eabi_attribute 25, 1
  10              		.eabi_attribute 26, 1
  11              		.eabi_attribute 30, 2
  12              		.eabi_attribute 34, 1
  13              		.eabi_attribute 18, 4
  14              		.file	"stm32h7xx_it.cpp"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.section	.text._Z11NMI_Handlerv,"ax",%progbits
  19              		.align	1
  20              		.p2align 2,,3
  21              		.global	_Z11NMI_Handlerv
  22              		.syntax unified
  23              		.thumb
  24              		.thumb_func
  26              	_Z11NMI_Handlerv:
  27              	.LFB544:
  28              		.file 1 "stm32h7xx_it.cpp"
   1:stm32h7xx_it.cpp **** /**
   2:stm32h7xx_it.cpp ****   ******************************************************************************
   3:stm32h7xx_it.cpp ****   * @file    DMA/DMAMUX_RequestGen/Src/stm32h7xx_it.c
   4:stm32h7xx_it.cpp ****   * @author  MCD Application Team
   5:stm32h7xx_it.cpp ****   * @brief   Main Interrupt Service Routines.
   6:stm32h7xx_it.cpp ****   ******************************************************************************
   7:stm32h7xx_it.cpp ****   * @attention
   8:stm32h7xx_it.cpp ****   *
   9:stm32h7xx_it.cpp ****   * Copyright (c) 2019 STMicroelectronics.
  10:stm32h7xx_it.cpp ****   * All rights reserved.
  11:stm32h7xx_it.cpp ****   *
  12:stm32h7xx_it.cpp ****   * This software is licensed under terms that can be found in the LICENSE file
  13:stm32h7xx_it.cpp ****   * in the root directory of this software component.
  14:stm32h7xx_it.cpp ****   * If no LICENSE file comes with this software, it is provided AS-IS.
  15:stm32h7xx_it.cpp ****   *
  16:stm32h7xx_it.cpp ****   ******************************************************************************
  17:stm32h7xx_it.cpp ****   */
  18:stm32h7xx_it.cpp **** 
  19:stm32h7xx_it.cpp **** /* Includes ------------------------------------------------------------------*/
  20:stm32h7xx_it.cpp **** //#include "main.h"
  21:stm32h7xx_it.cpp **** //#include "stm32h7xx_it.h"
  22:stm32h7xx_it.cpp **** 
  23:stm32h7xx_it.cpp **** /** @addtogroup STM32H7xx_HAL_Examples
  24:stm32h7xx_it.cpp ****   * @{
  25:stm32h7xx_it.cpp ****   */
  26:stm32h7xx_it.cpp **** 
  27:stm32h7xx_it.cpp **** /** @addtogroup DMAMUX_RequestGen
  28:stm32h7xx_it.cpp ****   * @{
  29:stm32h7xx_it.cpp ****   */
  30:stm32h7xx_it.cpp **** 
ARM GAS  C:\cygwin64\tmp\cckBM75g.s 			page 2


  31:stm32h7xx_it.cpp **** /* Private typedef -----------------------------------------------------------*/
  32:stm32h7xx_it.cpp **** /* Private define ------------------------------------------------------------*/
  33:stm32h7xx_it.cpp **** /* Private macro -------------------------------------------------------------*/
  34:stm32h7xx_it.cpp **** /* Private variables ---------------------------------------------------------*/
  35:stm32h7xx_it.cpp **** extern DMA_HandleTypeDef DMA_Handle;
  36:stm32h7xx_it.cpp **** /* Private function prototypes -----------------------------------------------*/
  37:stm32h7xx_it.cpp **** /* Private functions ---------------------------------------------------------*/
  38:stm32h7xx_it.cpp **** 
  39:stm32h7xx_it.cpp **** /******************************************************************************/
  40:stm32h7xx_it.cpp **** /*            Cortex-M7 Processor Exceptions Handlers                         */
  41:stm32h7xx_it.cpp **** /******************************************************************************/
  42:stm32h7xx_it.cpp **** 
  43:stm32h7xx_it.cpp **** /**
  44:stm32h7xx_it.cpp ****   * @brief  This function handles NMI exception.
  45:stm32h7xx_it.cpp ****   * @param  None
  46:stm32h7xx_it.cpp ****   * @retval None
  47:stm32h7xx_it.cpp ****   */
  48:stm32h7xx_it.cpp **** void NMI_Handler(void)
  49:stm32h7xx_it.cpp **** {
  29              		.loc 1 49 1 view -0
  30              		.cfi_startproc
  31              		@ args = 0, pretend = 0, frame = 0
  32              		@ frame_needed = 0, uses_anonymous_args = 0
  33              		@ link register save eliminated.
  50:stm32h7xx_it.cpp **** }
  34              		.loc 1 50 1 is_stmt 0 view .LVU1
  35 0000 7047     		bx	lr
  36              		.cfi_endproc
  37              	.LFE544:
  39 0002 00BF     		.section	.text._Z17HardFault_Handlerv,"ax",%progbits
  40              		.align	1
  41              		.p2align 2,,3
  42              		.global	_Z17HardFault_Handlerv
  43              		.syntax unified
  44              		.thumb
  45              		.thumb_func
  47              	_Z17HardFault_Handlerv:
  48              	.LFB545:
  51:stm32h7xx_it.cpp **** 
  52:stm32h7xx_it.cpp **** /**
  53:stm32h7xx_it.cpp ****   * @brief  This function handles Hard Fault exception.
  54:stm32h7xx_it.cpp ****   * @param  None
  55:stm32h7xx_it.cpp ****   * @retval None
  56:stm32h7xx_it.cpp ****   */
  57:stm32h7xx_it.cpp **** void HardFault_Handler(void)
  58:stm32h7xx_it.cpp **** {
  49              		.loc 1 58 1 is_stmt 1 view -0
  50              		.cfi_startproc
  51              		@ Volatile: function does not return.
  52              		@ args = 0, pretend = 0, frame = 0
  53              		@ frame_needed = 0, uses_anonymous_args = 0
  54              		@ link register save eliminated.
  55              	.L4:
  59:stm32h7xx_it.cpp ****   /* Go to infinite loop when Hard Fault exception occurs */
  60:stm32h7xx_it.cpp ****   while (1)
  56              		.loc 1 60 3 discriminator 1 view .LVU3
  57              		.loc 1 60 3 discriminator 1 view .LVU4
ARM GAS  C:\cygwin64\tmp\cckBM75g.s 			page 3


  58 0000 FEE7     		b	.L4
  59              		.cfi_endproc
  60              	.LFE545:
  62 0002 00BF     		.section	.text._Z17MemManage_Handlerv,"ax",%progbits
  63              		.align	1
  64              		.p2align 2,,3
  65              		.global	_Z17MemManage_Handlerv
  66              		.syntax unified
  67              		.thumb
  68              		.thumb_func
  70              	_Z17MemManage_Handlerv:
  71              	.LFB546:
  61:stm32h7xx_it.cpp ****   {
  62:stm32h7xx_it.cpp ****   }
  63:stm32h7xx_it.cpp **** }
  64:stm32h7xx_it.cpp **** 
  65:stm32h7xx_it.cpp **** /**
  66:stm32h7xx_it.cpp ****   * @brief  This function handles Memory Manage exception.
  67:stm32h7xx_it.cpp ****   * @param  None
  68:stm32h7xx_it.cpp ****   * @retval None
  69:stm32h7xx_it.cpp ****   */
  70:stm32h7xx_it.cpp **** void MemManage_Handler(void)
  71:stm32h7xx_it.cpp **** {
  72              		.loc 1 71 1 view -0
  73              		.cfi_startproc
  74              		@ Volatile: function does not return.
  75              		@ args = 0, pretend = 0, frame = 0
  76              		@ frame_needed = 0, uses_anonymous_args = 0
  77              		@ link register save eliminated.
  78              	.L6:
  72:stm32h7xx_it.cpp ****   /* Go to infinite loop when Memory Manage exception occurs */
  73:stm32h7xx_it.cpp ****   while (1)
  79              		.loc 1 73 3 discriminator 1 view .LVU6
  80              		.loc 1 73 3 discriminator 1 view .LVU7
  81 0000 FEE7     		b	.L6
  82              		.cfi_endproc
  83              	.LFE546:
  85 0002 00BF     		.section	.text._Z16BusFault_Handlerv,"ax",%progbits
  86              		.align	1
  87              		.p2align 2,,3
  88              		.global	_Z16BusFault_Handlerv
  89              		.syntax unified
  90              		.thumb
  91              		.thumb_func
  93              	_Z16BusFault_Handlerv:
  94              	.LFB547:
  74:stm32h7xx_it.cpp ****   {
  75:stm32h7xx_it.cpp ****   }
  76:stm32h7xx_it.cpp **** }
  77:stm32h7xx_it.cpp **** 
  78:stm32h7xx_it.cpp **** /**
  79:stm32h7xx_it.cpp ****   * @brief  This function handles Bus Fault exception.
  80:stm32h7xx_it.cpp ****   * @param  None
  81:stm32h7xx_it.cpp ****   * @retval None
  82:stm32h7xx_it.cpp ****   */
  83:stm32h7xx_it.cpp **** void BusFault_Handler(void)
  84:stm32h7xx_it.cpp **** {
ARM GAS  C:\cygwin64\tmp\cckBM75g.s 			page 4


  95              		.loc 1 84 1 view -0
  96              		.cfi_startproc
  97              		@ Volatile: function does not return.
  98              		@ args = 0, pretend = 0, frame = 0
  99              		@ frame_needed = 0, uses_anonymous_args = 0
 100              		@ link register save eliminated.
 101              	.L8:
  85:stm32h7xx_it.cpp ****   /* Go to infinite loop when Bus Fault exception occurs */
  86:stm32h7xx_it.cpp ****   while (1)
 102              		.loc 1 86 3 discriminator 1 view .LVU9
 103              		.loc 1 86 3 discriminator 1 view .LVU10
 104 0000 FEE7     		b	.L8
 105              		.cfi_endproc
 106              	.LFE547:
 108 0002 00BF     		.section	.text._Z18UsageFault_Handlerv,"ax",%progbits
 109              		.align	1
 110              		.p2align 2,,3
 111              		.global	_Z18UsageFault_Handlerv
 112              		.syntax unified
 113              		.thumb
 114              		.thumb_func
 116              	_Z18UsageFault_Handlerv:
 117              	.LFB548:
  87:stm32h7xx_it.cpp ****   {
  88:stm32h7xx_it.cpp ****   }
  89:stm32h7xx_it.cpp **** }
  90:stm32h7xx_it.cpp **** 
  91:stm32h7xx_it.cpp **** /**
  92:stm32h7xx_it.cpp ****   * @brief  This function handles Usage Fault exception.
  93:stm32h7xx_it.cpp ****   * @param  None
  94:stm32h7xx_it.cpp ****   * @retval None
  95:stm32h7xx_it.cpp ****   */
  96:stm32h7xx_it.cpp **** void UsageFault_Handler(void)
  97:stm32h7xx_it.cpp **** {
 118              		.loc 1 97 1 view -0
 119              		.cfi_startproc
 120              		@ Volatile: function does not return.
 121              		@ args = 0, pretend = 0, frame = 0
 122              		@ frame_needed = 0, uses_anonymous_args = 0
 123              		@ link register save eliminated.
 124              	.L10:
  98:stm32h7xx_it.cpp ****   /* Go to infinite loop when Usage Fault exception occurs */
  99:stm32h7xx_it.cpp ****   while (1)
 125              		.loc 1 99 3 discriminator 1 view .LVU12
 126              		.loc 1 99 3 discriminator 1 view .LVU13
 127 0000 FEE7     		b	.L10
 128              		.cfi_endproc
 129              	.LFE548:
 131 0002 00BF     		.section	.text._Z11SVC_Handlerv,"ax",%progbits
 132              		.align	1
 133              		.p2align 2,,3
 134              		.global	_Z11SVC_Handlerv
 135              		.syntax unified
 136              		.thumb
 137              		.thumb_func
 139              	_Z11SVC_Handlerv:
 140              	.LFB556:
ARM GAS  C:\cygwin64\tmp\cckBM75g.s 			page 5


 141              		.cfi_startproc
 142              		@ args = 0, pretend = 0, frame = 0
 143              		@ frame_needed = 0, uses_anonymous_args = 0
 144              		@ link register save eliminated.
 145 0000 7047     		bx	lr
 146              		.cfi_endproc
 147              	.LFE556:
 149 0002 00BF     		.section	.text._Z16DebugMon_Handlerv,"ax",%progbits
 150              		.align	1
 151              		.p2align 2,,3
 152              		.global	_Z16DebugMon_Handlerv
 153              		.syntax unified
 154              		.thumb
 155              		.thumb_func
 157              	_Z16DebugMon_Handlerv:
 158              	.LFB558:
 159              		.cfi_startproc
 160              		@ args = 0, pretend = 0, frame = 0
 161              		@ frame_needed = 0, uses_anonymous_args = 0
 162              		@ link register save eliminated.
 163 0000 7047     		bx	lr
 164              		.cfi_endproc
 165              	.LFE558:
 167 0002 00BF     		.section	.text._Z14PendSV_Handlerv,"ax",%progbits
 168              		.align	1
 169              		.p2align 2,,3
 170              		.global	_Z14PendSV_Handlerv
 171              		.syntax unified
 172              		.thumb
 173              		.thumb_func
 175              	_Z14PendSV_Handlerv:
 176              	.LFB560:
 177              		.cfi_startproc
 178              		@ args = 0, pretend = 0, frame = 0
 179              		@ frame_needed = 0, uses_anonymous_args = 0
 180              		@ link register save eliminated.
 181 0000 7047     		bx	lr
 182              		.cfi_endproc
 183              	.LFE560:
 185 0002 00BF     		.section	.text._Z15SysTick_Handlerv,"ax",%progbits
 186              		.align	1
 187              		.p2align 2,,3
 188              		.global	_Z15SysTick_Handlerv
 189              		.syntax unified
 190              		.thumb
 191              		.thumb_func
 193              	_Z15SysTick_Handlerv:
 194              	.LFB552:
 100:stm32h7xx_it.cpp ****   {
 101:stm32h7xx_it.cpp ****   }
 102:stm32h7xx_it.cpp **** }
 103:stm32h7xx_it.cpp **** 
 104:stm32h7xx_it.cpp **** /**
 105:stm32h7xx_it.cpp ****   * @brief  This function handles SVCall exception.
 106:stm32h7xx_it.cpp ****   * @param  None
 107:stm32h7xx_it.cpp ****   * @retval None
 108:stm32h7xx_it.cpp ****   */
ARM GAS  C:\cygwin64\tmp\cckBM75g.s 			page 6


 109:stm32h7xx_it.cpp **** void SVC_Handler(void)
 110:stm32h7xx_it.cpp **** {
 111:stm32h7xx_it.cpp **** }
 112:stm32h7xx_it.cpp **** 
 113:stm32h7xx_it.cpp **** /**
 114:stm32h7xx_it.cpp ****   * @brief  This function handles Debug Monitor exception.
 115:stm32h7xx_it.cpp ****   * @param  None
 116:stm32h7xx_it.cpp ****   * @retval None
 117:stm32h7xx_it.cpp ****   */
 118:stm32h7xx_it.cpp **** void DebugMon_Handler(void)
 119:stm32h7xx_it.cpp **** {
 120:stm32h7xx_it.cpp **** }
 121:stm32h7xx_it.cpp **** 
 122:stm32h7xx_it.cpp **** /**
 123:stm32h7xx_it.cpp ****   * @brief  This function handles PendSVC exception.
 124:stm32h7xx_it.cpp ****   * @param  None
 125:stm32h7xx_it.cpp ****   * @retval None
 126:stm32h7xx_it.cpp ****   */
 127:stm32h7xx_it.cpp **** void PendSV_Handler(void)
 128:stm32h7xx_it.cpp **** {
 129:stm32h7xx_it.cpp **** }
 130:stm32h7xx_it.cpp **** 
 131:stm32h7xx_it.cpp **** /**
 132:stm32h7xx_it.cpp ****   * @brief  This function handles SysTick Handler.
 133:stm32h7xx_it.cpp ****   * @param  None
 134:stm32h7xx_it.cpp ****   * @retval None
 135:stm32h7xx_it.cpp ****   */
 136:stm32h7xx_it.cpp **** void SysTick_Handler(void)
 137:stm32h7xx_it.cpp **** {
 195              		.loc 1 137 1 view -0
 196              		.cfi_startproc
 197              		@ args = 0, pretend = 0, frame = 0
 198              		@ frame_needed = 0, uses_anonymous_args = 0
 199              		@ link register save eliminated.
 138:stm32h7xx_it.cpp ****   HAL_IncTick();
 200              		.loc 1 138 3 view .LVU15
 201              		.loc 1 138 14 is_stmt 0 view .LVU16
 202 0000 FFF7FEBF 		b	HAL_IncTick
 203              	.LVL0:
 204              		.cfi_endproc
 205              	.LFE552:
 207              		.section	.text._Z24BDMA_Channel0_IRQHandlerv,"ax",%progbits
 208              		.align	1
 209              		.p2align 2,,3
 210              		.global	_Z24BDMA_Channel0_IRQHandlerv
 211              		.syntax unified
 212              		.thumb
 213              		.thumb_func
 215              	_Z24BDMA_Channel0_IRQHandlerv:
 216              	.LFB553:
 139:stm32h7xx_it.cpp **** }
 140:stm32h7xx_it.cpp **** 
 141:stm32h7xx_it.cpp **** /******************************************************************************/
 142:stm32h7xx_it.cpp **** /*                 STM32H7xx Peripherals Interrupt Handlers                   */
 143:stm32h7xx_it.cpp **** /*  Add here the Interrupt Handler for the used peripheral(s) (PPP), for the  */
 144:stm32h7xx_it.cpp **** /*  available peripheral interrupt handler's name please refer to the startup */
 145:stm32h7xx_it.cpp **** /*  file (startup_stm32h7xx.s).                                               */
ARM GAS  C:\cygwin64\tmp\cckBM75g.s 			page 7


 146:stm32h7xx_it.cpp **** /******************************************************************************/
 147:stm32h7xx_it.cpp **** 
 148:stm32h7xx_it.cpp **** /**
 149:stm32h7xx_it.cpp ****   * @brief  This function handles BDMA channel0 interrupt request.
 150:stm32h7xx_it.cpp ****   * @param  None
 151:stm32h7xx_it.cpp ****   * @retval None
 152:stm32h7xx_it.cpp ****   */
 153:stm32h7xx_it.cpp **** void BDMA_Channel0_IRQHandler(void)
 154:stm32h7xx_it.cpp **** {
 217              		.loc 1 154 1 is_stmt 1 view -0
 218              		.cfi_startproc
 219              		@ args = 0, pretend = 0, frame = 0
 220              		@ frame_needed = 0, uses_anonymous_args = 0
 221              		@ link register save eliminated.
 155:stm32h7xx_it.cpp ****   HAL_DMA_IRQHandler(&DMA_Handle);
 222              		.loc 1 155 3 view .LVU18
 223              		.loc 1 155 21 is_stmt 0 view .LVU19
 224 0000 0148     		ldr	r0, .L16
 225 0002 FFF7FEBF 		b	HAL_DMA_IRQHandler
 226              	.LVL1:
 227              	.L17:
 228 0006 00BF     		.align	2
 229              	.L16:
 230 0008 00000000 		.word	DMA_Handle
 231              		.cfi_endproc
 232              	.LFE553:
 234              		.section	.text._Z22DMAMUX2_OVR_IRQHandlerv,"ax",%progbits
 235              		.align	1
 236              		.p2align 2,,3
 237              		.global	_Z22DMAMUX2_OVR_IRQHandlerv
 238              		.syntax unified
 239              		.thumb
 240              		.thumb_func
 242              	_Z22DMAMUX2_OVR_IRQHandlerv:
 243              	.LFB554:
 156:stm32h7xx_it.cpp **** }
 157:stm32h7xx_it.cpp **** 
 158:stm32h7xx_it.cpp **** /**
 159:stm32h7xx_it.cpp ****   * @brief  This function handles DMAMUX2  interrupt request.
 160:stm32h7xx_it.cpp ****   * @param  None
 161:stm32h7xx_it.cpp ****   * @retval None
 162:stm32h7xx_it.cpp ****   */
 163:stm32h7xx_it.cpp **** void DMAMUX2_OVR_IRQHandler(void)
 164:stm32h7xx_it.cpp **** {
 244              		.loc 1 164 1 is_stmt 1 view -0
 245              		.cfi_startproc
 246              		@ args = 0, pretend = 0, frame = 0
 247              		@ frame_needed = 0, uses_anonymous_args = 0
 248              		@ link register save eliminated.
 165:stm32h7xx_it.cpp ****   HAL_DMAEx_MUX_IRQHandler(&DMA_Handle);
 249              		.loc 1 165 3 view .LVU21
 250              		.loc 1 165 27 is_stmt 0 view .LVU22
 251 0000 0148     		ldr	r0, .L19
 252 0002 FFF7FEBF 		b	HAL_DMAEx_MUX_IRQHandler
 253              	.LVL2:
 254              	.L20:
 255 0006 00BF     		.align	2
ARM GAS  C:\cygwin64\tmp\cckBM75g.s 			page 8


 256              	.L19:
 257 0008 00000000 		.word	DMA_Handle
 258              		.cfi_endproc
 259              	.LFE554:
 261              		.text
 262              	.Letext0:
 263              		.file 2 "c:\\program files (x86)\\gnu arm embedded toolchain\\10 2021.10\\arm-none-eabi\\include\\
 264              		.file 3 "c:\\program files (x86)\\gnu arm embedded toolchain\\10 2021.10\\arm-none-eabi\\include\\
 265              		.file 4 "../Drivers/CMSIS/Device/ST/STM32H7xx/Include/stm32h750xx.h"
 266              		.file 5 "c:\\program files (x86)\\gnu arm embedded toolchain\\10 2021.10\\arm-none-eabi\\include\\
 267              		.file 6 "c:\\program files (x86)\\gnu arm embedded toolchain\\10 2021.10\\arm-none-eabi\\include\\
 268              		.file 7 "c:\\program files (x86)\\gnu arm embedded toolchain\\10 2021.10\\arm-none-eabi\\include\\
 269              		.file 8 "c:\\program files (x86)\\gnu arm embedded toolchain\\10 2021.10\\arm-none-eabi\\include\\
 270              		.file 9 "c:\\program files (x86)\\gnu arm embedded toolchain\\10 2021.10\\arm-none-eabi\\include\\
 271              		.file 10 "../Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_def.h"
 272              		.file 11 "../Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_dma.h"
 273              		.file 12 "../Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_dma_ex.h"
 274              		.file 13 "../Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal.h"
 275              		.file 14 "<built-in>"
ARM GAS  C:\cygwin64\tmp\cckBM75g.s 			page 9


DEFINED SYMBOLS
                            *ABS*:00000000 stm32h7xx_it.cpp
C:\cygwin64\tmp\cckBM75g.s:19     .text._Z11NMI_Handlerv:00000000 $t
C:\cygwin64\tmp\cckBM75g.s:26     .text._Z11NMI_Handlerv:00000000 _Z11NMI_Handlerv
C:\cygwin64\tmp\cckBM75g.s:40     .text._Z17HardFault_Handlerv:00000000 $t
C:\cygwin64\tmp\cckBM75g.s:47     .text._Z17HardFault_Handlerv:00000000 _Z17HardFault_Handlerv
C:\cygwin64\tmp\cckBM75g.s:63     .text._Z17MemManage_Handlerv:00000000 $t
C:\cygwin64\tmp\cckBM75g.s:70     .text._Z17MemManage_Handlerv:00000000 _Z17MemManage_Handlerv
C:\cygwin64\tmp\cckBM75g.s:86     .text._Z16BusFault_Handlerv:00000000 $t
C:\cygwin64\tmp\cckBM75g.s:93     .text._Z16BusFault_Handlerv:00000000 _Z16BusFault_Handlerv
C:\cygwin64\tmp\cckBM75g.s:109    .text._Z18UsageFault_Handlerv:00000000 $t
C:\cygwin64\tmp\cckBM75g.s:116    .text._Z18UsageFault_Handlerv:00000000 _Z18UsageFault_Handlerv
C:\cygwin64\tmp\cckBM75g.s:132    .text._Z11SVC_Handlerv:00000000 $t
C:\cygwin64\tmp\cckBM75g.s:139    .text._Z11SVC_Handlerv:00000000 _Z11SVC_Handlerv
C:\cygwin64\tmp\cckBM75g.s:150    .text._Z16DebugMon_Handlerv:00000000 $t
C:\cygwin64\tmp\cckBM75g.s:157    .text._Z16DebugMon_Handlerv:00000000 _Z16DebugMon_Handlerv
C:\cygwin64\tmp\cckBM75g.s:168    .text._Z14PendSV_Handlerv:00000000 $t
C:\cygwin64\tmp\cckBM75g.s:175    .text._Z14PendSV_Handlerv:00000000 _Z14PendSV_Handlerv
C:\cygwin64\tmp\cckBM75g.s:186    .text._Z15SysTick_Handlerv:00000000 $t
C:\cygwin64\tmp\cckBM75g.s:193    .text._Z15SysTick_Handlerv:00000000 _Z15SysTick_Handlerv
C:\cygwin64\tmp\cckBM75g.s:208    .text._Z24BDMA_Channel0_IRQHandlerv:00000000 $t
C:\cygwin64\tmp\cckBM75g.s:215    .text._Z24BDMA_Channel0_IRQHandlerv:00000000 _Z24BDMA_Channel0_IRQHandlerv
C:\cygwin64\tmp\cckBM75g.s:230    .text._Z24BDMA_Channel0_IRQHandlerv:00000008 $d
C:\cygwin64\tmp\cckBM75g.s:235    .text._Z22DMAMUX2_OVR_IRQHandlerv:00000000 $t
C:\cygwin64\tmp\cckBM75g.s:242    .text._Z22DMAMUX2_OVR_IRQHandlerv:00000000 _Z22DMAMUX2_OVR_IRQHandlerv
C:\cygwin64\tmp\cckBM75g.s:257    .text._Z22DMAMUX2_OVR_IRQHandlerv:00000008 $d

UNDEFINED SYMBOLS
HAL_IncTick
HAL_DMA_IRQHandler
DMA_Handle
HAL_DMAEx_MUX_IRQHandler
