set QUADSPI 1

source [find target/stm32h7x.cfg]

set _FLASHNAME IS25LP064A
set _TARGETNAME $_CHIPNAME.cpu0
set _QSPINAME $_CHIPNAME.qspi
#flash bank $_QSPINAME stmqspi 0x90000000 0 0 0 $_CHIPNAME.cpu0 0x52005000
#flash bank $_FLASHNAME stmqspi 0x90000000 0 0 0 $_TARGETNAME 0xA0001000

proc qspi_init { qpi } {
	global a
	mmw 0x580244E0 0x000007FF 0				;# RCC_AHB4ENR |= GPIOAEN-GPIOKEN (enable clocks)
	mmw 0x580244D4 0x00004000 0				;# RCC_AHB3ENR |= QSPIEN (enable clock)
	sleep 1									;# Wait for clock startup

    # PF10:AF09:V, PF09:AF10:V, PF08:AF10:V, PF07:AF09:V, PF06:AF09:V, PG06:AF10:V
    # Port F: PF10:AF09:V, PF09:AF10:V, PF08:AF10:V, PF07:AF09:V, PF06:AF09:V
    mmw 0x58021400 0x002AA000 0x00155000    ;# MODER
    mmw 0x58021408 0x003FF000 0x00000000    ;# OSPEEDR
    mmw 0x5802140C 0x00000000 0x003FF000    ;# PUPDR
    mmw 0x58021420 0x99000000 0x66000000    ;# AFRL
    mmw 0x58021424 0x000009AA 0x00000655    ;# AFRH
    # Port G: PG06:AF10:V
    mmw 0x58021800 0x00002000 0x00001000    ;# MODER
    mmw 0x58021808 0x00003000 0x00000000    ;# OSPEEDR
    mmw 0x5802180C 0x00000000 0x00003000    ;# PUPDR
    mmw 0x58021820 0x0A000000 0x05000000    ;# AFRL

	# correct FSIZE is 0x1A, however, this causes trouble when
	# reading the last bytes at end of bank in *memory mapped* mode

	mww 0x52005000 0x01000000				;# QUADSPI_CR: PRESCALER=5, APMS=1, FTHRES=0, FSEL=0, DFM=0, SSHIFT=1, TCEN=1
	mww 0x52005004 0x00160100				;# QUADSPI_DCR: FSIZE=0x16, CSHT=0x02, CKMODE=0

	mww 0x52005030 0x00001000				;# QUADSPI_LPTR: deactivate CS after 4096 clocks when FIFO is full
    #mww 0x52005014 0x00000166
    #mww 0x52005014 0x00000199
	#mww 0x52005014 0x0D002503				;# QUADSPI_CCR: FMODE=0x3, DMODE=0x1, DCYC=0x0, ADSIZE=0x3, ADMODE=0x1, IMODE=0x1
	mmw 0x52005000 0x00000001 0				;# QUADSPI_CR: EN=1

	# Exit QPI mode
	mmw 0x52005000 0x00000002 0				;# QUADSPI_CR: ABORT=1
	mww 0x52005014 0x000001F5				;# QUADSPI_CCR: FMODE=0x0, DMODE=0x0, DCYC=0x0, ADSIZE=0x0, ADMODE=0x0, IMODE=0x3, INSTR=Exit QPI
	sleep 1
    

	if { $qpi == 1 } {
		#Write Enable
		mmw 0x52005000 0x00000002 0			;# QUADSPI_CR: ABORT=1
		mww 0x52005014 0x00000106			;# QUADSPI_CCR: FMODE=0x0, DMODE=0x0, DCYC=0x0, ADSIZE=0x0, ADMODE=0x0, IMODE=0x1, INSTR=Write Enable
		sleep 1
        
		# Configure dummy clocks via volatile configuration register
		mmw 0x52005000 0x00000002 0			;# QUADSPI_CR: ABORT=1
		mww 0x52005010 0x00000001			;# QUADSPI_DLR: 2 data bytes
		mww 0x52005014 0x01000181			;# QUADSPI_CCR: FMODE=0x0, DMODE=0x1, DCYC=0x0, ADSIZE=0x0, ADMODE=0x0, IMODE=0x1, INSTR=Write Volatile Conf. Reg.
		mwh 0x52005020 0xABAB				;# QUADSPI_DR: 0xAB 0xAB for 10 dummy clocks
		sleep 1
        
		# Write Enable
		mmw 0x52005000 0x00000002 0			;# QUADSPI_CR: ABORT=1
		mww 0x52005014 0x00000106			;# QUADSPI_CCR: FMODE=0x0, DMODE=0x0, DCYC=0x0, ADSIZE=0x0, ADMODE=0x0, IMODE=0x1, INSTR=Write Enable
		sleep 1
        
		# Enable QPI mode via enhanced volatile configuration register
		mmw 0x52005000 0x00000002 0			;# QUADSPI_CR: ABORT=1
		mww 0x52005010 0x00000001			;# QUADSPI_DLR: 2 data bytes
		mww 0x52005014 0x01000161			;# QUADSPI_CCR: FMODE=0x0, DMODE=0x1, DCYC=0x0, ADSIZE=0x0, ADMODE=0x0, IMODE=0x1, INSTR=Write Enhanced Conf. Reg.
		mwh 0x52005020 0x3F3F				;# QUADSPI_DR: 0x3F 0x3F to enable QPI and DPI mode
		sleep 1
        
		# Enter QPI mode
		mmw 0x52005000 0x00000002 0			;# QUADSPI_CR: ABORT=1
		mww 0x52005014 0x00000135			;# QUADSPI_CCR: FMODE=0x0, DMODE=0x0, DCYC=0x0, ADSIZE=0x0, ADMODE=0x0, IMODE=0x1, INSTR=Enter QPI
		sleep 1
        
		# memory-mapped fast read mode with 4-byte addresses and 10 dummy cycles (for read only)
		mmw 0x52005000 0x00000002 0			;# QUADSPI_CR: ABORT=1
		mww 0x52005014 0x0F283FEC			;# QUADSPI_CCR: FMODE=0x3, DMODE=0x3, DCYC=0xA, ADSIZE=0x3, ADMODE=0x3, IMODE=0x3, INSTR=Fast READ

	} else {
		# memory-mapped read mode with 4-byte addresses
		mmw 0x52005000 0x00000002 0			;# QUADSPI_CR: ABORT=1
		mww 0x52005014 0x0D003513			;# QUADSPI_CCR: FMODE=0x3, DMODE=0x1, DCYC=0x0, ADSIZE=0x3, ADMODE=0x1, IMODE=0x1, INSTR=READ
	}
}

targets $_CHIPNAME.cpu0

$_CHIPNAME.cpu0 configure -event reset-end {
    
	 #global QUADSPI
     #
	 #mmw 0x52002000 0x00000004 0x0000000B	;# FLASH_ACR: 4 WS for 192 MHZ HCLK
     #
	 #mmw 0x58024400 0x00000001 0x00000018	;# RCC_CR: HSIDIV=1, HSI on
	 #mmw 0x58024410 0x10000000 0xEE000007	;# RCC_CFGR: MCO2=system, MCO2PRE=8, HSI as system clock
	 #mww 0x58024418 0x00000040				;# RCC_D1CFGR: D1CPRE=1, D1PPRE=2, HPRE=1
	 #mww 0x5802441C 0x00000440				;# RCC_D2CFGR: D2PPRE2=2, D2PPRE1=2
	 #mww 0x58024420 0x00000040				;# RCC_D3CFGR: D3PPRE=2
	 #mww 0x58024428 0x00000040				;# RCC_PPLCKSELR: DIVM3=0, DIVM2=0, DIVM1=4, PLLSRC=HSI
	 #mmw 0x5802442C 0x0001000C 0x00000002	;# RCC_PLLCFGR: PLL1RGE=8MHz to 16MHz, PLL1VCOSEL=wide
	 #mww 0x58024430 0x01070217				;# RCC_PLL1DIVR: 192 MHz: DIVR1=2, DIVQ=8, DIVP1=2, DIVN1=24
	 #mmw 0x58024400 0x01000000 0				;# RCC_CR: PLL1ON=1
	 #sleep 1
	 #mmw 0x58024410 0x00000003 0				;# RCC_CFGR: PLL1 as system clock
	 #sleep 1
     #
	 #adapter speed 24000

	#if { $QUADSPI } {
        

    #qspi_init 1
    echo "init done"
    flash probe 1
    echo "Setting stmqspi configuration"
    #flash 1 issi stmqspi 0x90000000 0 0 0 0 0xA0001000
    #stmqspi set bank_id name          total_size page_size read_cmd fread_cmd pprg_cmd mass_erase_cmd sector_size sector_erase_cmd
    #stmqspi  set 1       issi          0x800000   0x100     0x03     0x0B      0x02     0xC7           0x1000      0xd7
    #stmqspi  set 1       issi          0x800000   0x100     0x03     0x0B      0x02     0xC7           0x1000      0x20
		#32blit_qspi_init 1
        #hxa-001_qspi_init 1
	#}
}
